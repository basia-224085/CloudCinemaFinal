#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CCS.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CloudCinemaDB")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAspNetUsers(AspNetUsers instance);
    partial void UpdateAspNetUsers(AspNetUsers instance);
    partial void DeleteAspNetUsers(AspNetUsers instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertHours(Hours instance);
    partial void UpdateHours(Hours instance);
    partial void DeleteHours(Hours instance);
    partial void InsertMovies(Movies instance);
    partial void UpdateMovies(Movies instance);
    partial void DeleteMovies(Movies instance);
    partial void InsertReservations(Reservations instance);
    partial void UpdateReservations(Reservations instance);
    partial void DeleteReservations(Reservations instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertScreening_rooms(Screening_rooms instance);
    partial void UpdateScreening_rooms(Screening_rooms instance);
    partial void DeleteScreening_rooms(Screening_rooms instance);
    partial void InsertSeat(Seat instance);
    partial void UpdateSeat(Seat instance);
    partial void DeleteSeat(Seat instance);
    partial void InsertShowtimes(Showtimes instance);
    partial void UpdateShowtimes(Showtimes instance);
    partial void DeleteShowtimes(Showtimes instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CloudCinemaDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AspNetUsers> AspNetUsers
		{
			get
			{
				return this.GetTable<AspNetUsers>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genre
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<Hours> Hours
		{
			get
			{
				return this.GetTable<Hours>();
			}
		}
		
		public System.Data.Linq.Table<Movies> Movies
		{
			get
			{
				return this.GetTable<Movies>();
			}
		}
		
		public System.Data.Linq.Table<Reservations> Reservations
		{
			get
			{
				return this.GetTable<Reservations>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedule
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<Screening_rooms> Screening_rooms
		{
			get
			{
				return this.GetTable<Screening_rooms>();
			}
		}
		
		public System.Data.Linq.Table<Seat> Seat
		{
			get
			{
				return this.GetTable<Seat>();
			}
		}
		
		public System.Data.Linq.Table<Showtimes> Showtimes
		{
			get
			{
				return this.GetTable<Showtimes>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUsers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Email;
		
		private bool _EmailConfirmed;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private bool _PhoneNumberConfirmed;
		
		private bool _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private bool _LockoutEnabled;
		
		private int _AccessFailedCount;
		
		private string _UserName;
		
		private EntitySet<Reservations> _Reservations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(bool value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(bool value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(bool value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(int value);
    partial void OnAccessFailedCountChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public AspNetUsers()
		{
			this._Reservations = new EntitySet<Reservations>(new Action<Reservations>(this.attach_Reservations), new Action<Reservations>(this.detach_Reservations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit NOT NULL")]
		public bool PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit NOT NULL")]
		public bool TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int NOT NULL")]
		public int AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Reservations", Storage="_Reservations", ThisKey="Id", OtherKey="Id")]
		public EntitySet<Reservations> Reservations
		{
			get
			{
				return this._Reservations;
			}
			set
			{
				this._Reservations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reservations(Reservations entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = this;
		}
		
		private void detach_Reservations(Reservations entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genre")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _genre_id;
		
		private string _name;
		
		private EntitySet<Movies> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ongenre_idChanging(int value);
    partial void Ongenre_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Genre()
		{
			this._Movies = new EntitySet<Movies>(new Action<Movies>(this.attach_Movies), new Action<Movies>(this.detach_Movies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genre_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int genre_id
		{
			get
			{
				return this._genre_id;
			}
			set
			{
				if ((this._genre_id != value))
				{
					this.Ongenre_idChanging(value);
					this.SendPropertyChanging();
					this._genre_id = value;
					this.SendPropertyChanged("genre_id");
					this.Ongenre_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Movies", Storage="_Movies", ThisKey="genre_id", OtherKey="genre_id")]
		public EntitySet<Movies> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movies(Movies entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_Movies(Movies entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hours")]
	public partial class Hours : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _hour_id;
		
		private string _hour;
		
		private EntitySet<Showtimes> _Showtimes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onhour_idChanging(int value);
    partial void Onhour_idChanged();
    partial void OnhourChanging(string value);
    partial void OnhourChanged();
    #endregion
		
		public Hours()
		{
			this._Showtimes = new EntitySet<Showtimes>(new Action<Showtimes>(this.attach_Showtimes), new Action<Showtimes>(this.detach_Showtimes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hour_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int hour_id
		{
			get
			{
				return this._hour_id;
			}
			set
			{
				if ((this._hour_id != value))
				{
					this.Onhour_idChanging(value);
					this.SendPropertyChanging();
					this._hour_id = value;
					this.SendPropertyChanged("hour_id");
					this.Onhour_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hour", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string hour
		{
			get
			{
				return this._hour;
			}
			set
			{
				if ((this._hour != value))
				{
					this.OnhourChanging(value);
					this.SendPropertyChanging();
					this._hour = value;
					this.SendPropertyChanged("hour");
					this.OnhourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hours_Showtimes", Storage="_Showtimes", ThisKey="hour_id", OtherKey="hour_id")]
		public EntitySet<Showtimes> Showtimes
		{
			get
			{
				return this._Showtimes;
			}
			set
			{
				this._Showtimes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Showtimes(Showtimes entity)
		{
			this.SendPropertyChanging();
			entity.Hours = this;
		}
		
		private void detach_Showtimes(Showtimes entity)
		{
			this.SendPropertyChanging();
			entity.Hours = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movies")]
	public partial class Movies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _movie_id;
		
		private int _genre_id;
		
		private string _title;
		
		private string _trailer;
		
		private decimal _price_per_seat;
		
		private string _description;
		
		private int _duration;
		
		private EntitySet<Schedule> _Schedule;
		
		private EntitySet<Seat> _Seat;
		
		private EntityRef<Genre> _Genre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmovie_idChanging(int value);
    partial void Onmovie_idChanged();
    partial void Ongenre_idChanging(int value);
    partial void Ongenre_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OntrailerChanging(string value);
    partial void OntrailerChanged();
    partial void Onprice_per_seatChanging(decimal value);
    partial void Onprice_per_seatChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OndurationChanging(int value);
    partial void OndurationChanged();
    #endregion
		
		public Movies()
		{
			this._Schedule = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedule), new Action<Schedule>(this.detach_Schedule));
			this._Seat = new EntitySet<Seat>(new Action<Seat>(this.attach_Seat), new Action<Seat>(this.detach_Seat));
			this._Genre = default(EntityRef<Genre>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movie_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int movie_id
		{
			get
			{
				return this._movie_id;
			}
			set
			{
				if ((this._movie_id != value))
				{
					this.Onmovie_idChanging(value);
					this.SendPropertyChanging();
					this._movie_id = value;
					this.SendPropertyChanged("movie_id");
					this.Onmovie_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genre_id", DbType="Int NOT NULL")]
		public int genre_id
		{
			get
			{
				return this._genre_id;
			}
			set
			{
				if ((this._genre_id != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongenre_idChanging(value);
					this.SendPropertyChanging();
					this._genre_id = value;
					this.SendPropertyChanged("genre_id");
					this.Ongenre_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trailer", DbType="NVarChar(100)")]
		public string trailer
		{
			get
			{
				return this._trailer;
			}
			set
			{
				if ((this._trailer != value))
				{
					this.OntrailerChanging(value);
					this.SendPropertyChanging();
					this._trailer = value;
					this.SendPropertyChanged("trailer");
					this.OntrailerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price_per_seat", DbType="Decimal(2,2) NOT NULL")]
		public decimal price_per_seat
		{
			get
			{
				return this._price_per_seat;
			}
			set
			{
				if ((this._price_per_seat != value))
				{
					this.Onprice_per_seatChanging(value);
					this.SendPropertyChanging();
					this._price_per_seat = value;
					this.SendPropertyChanged("price_per_seat");
					this.Onprice_per_seatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(2000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_duration", DbType="Int NOT NULL")]
		public int duration
		{
			get
			{
				return this._duration;
			}
			set
			{
				if ((this._duration != value))
				{
					this.OndurationChanging(value);
					this.SendPropertyChanging();
					this._duration = value;
					this.SendPropertyChanged("duration");
					this.OndurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movies_Schedule", Storage="_Schedule", ThisKey="movie_id", OtherKey="movie_id")]
		public EntitySet<Schedule> Schedule
		{
			get
			{
				return this._Schedule;
			}
			set
			{
				this._Schedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movies_Seat", Storage="_Seat", ThisKey="movie_id", OtherKey="movie_id")]
		public EntitySet<Seat> Seat
		{
			get
			{
				return this._Seat;
			}
			set
			{
				this._Seat.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Movies", Storage="_Genre", ThisKey="genre_id", OtherKey="genre_id", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._genre_id = value.genre_id;
					}
					else
					{
						this._genre_id = default(int);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Movies = this;
		}
		
		private void detach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Movies = null;
		}
		
		private void attach_Seat(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Movies = this;
		}
		
		private void detach_Seat(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Movies = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reservations")]
	public partial class Reservations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _reservation_id;
		
		private int _seat_id;
		
		private decimal _total_price;
		
		private string _Id;
		
		private EntityRef<AspNetUsers> _AspNetUsers;
		
		private EntityRef<Seat> _Seat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onreservation_idChanging(int value);
    partial void Onreservation_idChanged();
    partial void Onseat_idChanging(int value);
    partial void Onseat_idChanged();
    partial void Ontotal_priceChanging(decimal value);
    partial void Ontotal_priceChanged();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    #endregion
		
		public Reservations()
		{
			this._AspNetUsers = default(EntityRef<AspNetUsers>);
			this._Seat = default(EntityRef<Seat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reservation_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int reservation_id
		{
			get
			{
				return this._reservation_id;
			}
			set
			{
				if ((this._reservation_id != value))
				{
					this.Onreservation_idChanging(value);
					this.SendPropertyChanging();
					this._reservation_id = value;
					this.SendPropertyChanged("reservation_id");
					this.Onreservation_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seat_id", DbType="Int NOT NULL")]
		public int seat_id
		{
			get
			{
				return this._seat_id;
			}
			set
			{
				if ((this._seat_id != value))
				{
					if (this._Seat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onseat_idChanging(value);
					this.SendPropertyChanging();
					this._seat_id = value;
					this.SendPropertyChanged("seat_id");
					this.Onseat_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total_price", DbType="Decimal(3,2) NOT NULL")]
		public decimal total_price
		{
			get
			{
				return this._total_price;
			}
			set
			{
				if ((this._total_price != value))
				{
					this.Ontotal_priceChanging(value);
					this.SendPropertyChanging();
					this._total_price = value;
					this.SendPropertyChanged("total_price");
					this.Ontotal_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._AspNetUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Reservations", Storage="_AspNetUsers", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public AspNetUsers AspNetUsers
		{
			get
			{
				return this._AspNetUsers.Entity;
			}
			set
			{
				AspNetUsers previousValue = this._AspNetUsers.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUsers.Entity = null;
						previousValue.Reservations.Remove(this);
					}
					this._AspNetUsers.Entity = value;
					if ((value != null))
					{
						value.Reservations.Add(this);
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(string);
					}
					this.SendPropertyChanged("AspNetUsers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Reservations", Storage="_Seat", ThisKey="seat_id", OtherKey="seat_id", IsForeignKey=true)]
		public Seat Seat
		{
			get
			{
				return this._Seat.Entity;
			}
			set
			{
				Seat previousValue = this._Seat.Entity;
				if (((previousValue != value) 
							|| (this._Seat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seat.Entity = null;
						previousValue.Reservations.Remove(this);
					}
					this._Seat.Entity = value;
					if ((value != null))
					{
						value.Reservations.Add(this);
						this._seat_id = value.seat_id;
					}
					else
					{
						this._seat_id = default(int);
					}
					this.SendPropertyChanged("Seat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _date;
		
		private int _showtime_id;
		
		private int _movie_id;
		
		private EntityRef<Movies> _Movies;
		
		private EntityRef<Showtimes> _Showtimes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void Onshowtime_idChanging(int value);
    partial void Onshowtime_idChanged();
    partial void Onmovie_idChanging(int value);
    partial void Onmovie_idChanged();
    #endregion
		
		public Schedule()
		{
			this._Movies = default(EntityRef<Movies>);
			this._Showtimes = default(EntityRef<Showtimes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_showtime_id", DbType="Int NOT NULL")]
		public int showtime_id
		{
			get
			{
				return this._showtime_id;
			}
			set
			{
				if ((this._showtime_id != value))
				{
					if (this._Showtimes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onshowtime_idChanging(value);
					this.SendPropertyChanging();
					this._showtime_id = value;
					this.SendPropertyChanged("showtime_id");
					this.Onshowtime_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movie_id", DbType="Int NOT NULL")]
		public int movie_id
		{
			get
			{
				return this._movie_id;
			}
			set
			{
				if ((this._movie_id != value))
				{
					if (this._Movies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmovie_idChanging(value);
					this.SendPropertyChanging();
					this._movie_id = value;
					this.SendPropertyChanged("movie_id");
					this.Onmovie_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movies_Schedule", Storage="_Movies", ThisKey="movie_id", OtherKey="movie_id", IsForeignKey=true)]
		public Movies Movies
		{
			get
			{
				return this._Movies.Entity;
			}
			set
			{
				Movies previousValue = this._Movies.Entity;
				if (((previousValue != value) 
							|| (this._Movies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movies.Entity = null;
						previousValue.Schedule.Remove(this);
					}
					this._Movies.Entity = value;
					if ((value != null))
					{
						value.Schedule.Add(this);
						this._movie_id = value.movie_id;
					}
					else
					{
						this._movie_id = default(int);
					}
					this.SendPropertyChanged("Movies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Showtimes_Schedule", Storage="_Showtimes", ThisKey="showtime_id", OtherKey="showtime_id", IsForeignKey=true)]
		public Showtimes Showtimes
		{
			get
			{
				return this._Showtimes.Entity;
			}
			set
			{
				Showtimes previousValue = this._Showtimes.Entity;
				if (((previousValue != value) 
							|| (this._Showtimes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Showtimes.Entity = null;
						previousValue.Schedule.Remove(this);
					}
					this._Showtimes.Entity = value;
					if ((value != null))
					{
						value.Schedule.Add(this);
						this._showtime_id = value.showtime_id;
					}
					else
					{
						this._showtime_id = default(int);
					}
					this.SendPropertyChanged("Showtimes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Screening_rooms")]
	public partial class Screening_rooms : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _screening_room_id;
		
		private string _name;
		
		private EntitySet<Showtimes> _Showtimes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onscreening_room_idChanging(int value);
    partial void Onscreening_room_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Screening_rooms()
		{
			this._Showtimes = new EntitySet<Showtimes>(new Action<Showtimes>(this.attach_Showtimes), new Action<Showtimes>(this.detach_Showtimes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_screening_room_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int screening_room_id
		{
			get
			{
				return this._screening_room_id;
			}
			set
			{
				if ((this._screening_room_id != value))
				{
					this.Onscreening_room_idChanging(value);
					this.SendPropertyChanging();
					this._screening_room_id = value;
					this.SendPropertyChanged("screening_room_id");
					this.Onscreening_room_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Screening_rooms_Showtimes", Storage="_Showtimes", ThisKey="screening_room_id", OtherKey="screening_room_id")]
		public EntitySet<Showtimes> Showtimes
		{
			get
			{
				return this._Showtimes;
			}
			set
			{
				this._Showtimes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Showtimes(Showtimes entity)
		{
			this.SendPropertyChanging();
			entity.Screening_rooms = this;
		}
		
		private void detach_Showtimes(Showtimes entity)
		{
			this.SendPropertyChanging();
			entity.Screening_rooms = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seat")]
	public partial class Seat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _seat_id;
		
		private int _movie_id;
		
		private int _column;
		
		private int _row;
		
		private bool _reserved;
		
		private EntitySet<Reservations> _Reservations;
		
		private EntityRef<Movies> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onseat_idChanging(int value);
    partial void Onseat_idChanged();
    partial void Onmovie_idChanging(int value);
    partial void Onmovie_idChanged();
    partial void OncolumnChanging(int value);
    partial void OncolumnChanged();
    partial void OnrowChanging(int value);
    partial void OnrowChanged();
    partial void OnreservedChanging(bool value);
    partial void OnreservedChanged();
    #endregion
		
		public Seat()
		{
			this._Reservations = new EntitySet<Reservations>(new Action<Reservations>(this.attach_Reservations), new Action<Reservations>(this.detach_Reservations));
			this._Movies = default(EntityRef<Movies>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seat_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int seat_id
		{
			get
			{
				return this._seat_id;
			}
			set
			{
				if ((this._seat_id != value))
				{
					this.Onseat_idChanging(value);
					this.SendPropertyChanging();
					this._seat_id = value;
					this.SendPropertyChanged("seat_id");
					this.Onseat_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movie_id", DbType="Int NOT NULL")]
		public int movie_id
		{
			get
			{
				return this._movie_id;
			}
			set
			{
				if ((this._movie_id != value))
				{
					if (this._Movies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmovie_idChanging(value);
					this.SendPropertyChanging();
					this._movie_id = value;
					this.SendPropertyChanged("movie_id");
					this.Onmovie_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[column]", Storage="_column", DbType="Int NOT NULL")]
		public int column
		{
			get
			{
				return this._column;
			}
			set
			{
				if ((this._column != value))
				{
					this.OncolumnChanging(value);
					this.SendPropertyChanging();
					this._column = value;
					this.SendPropertyChanged("column");
					this.OncolumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_row", DbType="Int NOT NULL")]
		public int row
		{
			get
			{
				return this._row;
			}
			set
			{
				if ((this._row != value))
				{
					this.OnrowChanging(value);
					this.SendPropertyChanging();
					this._row = value;
					this.SendPropertyChanged("row");
					this.OnrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reserved", DbType="Bit NOT NULL")]
		public bool reserved
		{
			get
			{
				return this._reserved;
			}
			set
			{
				if ((this._reserved != value))
				{
					this.OnreservedChanging(value);
					this.SendPropertyChanging();
					this._reserved = value;
					this.SendPropertyChanged("reserved");
					this.OnreservedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Reservations", Storage="_Reservations", ThisKey="seat_id", OtherKey="seat_id")]
		public EntitySet<Reservations> Reservations
		{
			get
			{
				return this._Reservations;
			}
			set
			{
				this._Reservations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movies_Seat", Storage="_Movies", ThisKey="movie_id", OtherKey="movie_id", IsForeignKey=true)]
		public Movies Movies
		{
			get
			{
				return this._Movies.Entity;
			}
			set
			{
				Movies previousValue = this._Movies.Entity;
				if (((previousValue != value) 
							|| (this._Movies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movies.Entity = null;
						previousValue.Seat.Remove(this);
					}
					this._Movies.Entity = value;
					if ((value != null))
					{
						value.Seat.Add(this);
						this._movie_id = value.movie_id;
					}
					else
					{
						this._movie_id = default(int);
					}
					this.SendPropertyChanged("Movies");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reservations(Reservations entity)
		{
			this.SendPropertyChanging();
			entity.Seat = this;
		}
		
		private void detach_Reservations(Reservations entity)
		{
			this.SendPropertyChanging();
			entity.Seat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Showtimes")]
	public partial class Showtimes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _showtime_id;
		
		private int _hour_id;
		
		private int _screening_room_id;
		
		private EntitySet<Schedule> _Schedule;
		
		private EntityRef<Hours> _Hours;
		
		private EntityRef<Screening_rooms> _Screening_rooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onshowtime_idChanging(int value);
    partial void Onshowtime_idChanged();
    partial void Onhour_idChanging(int value);
    partial void Onhour_idChanged();
    partial void Onscreening_room_idChanging(int value);
    partial void Onscreening_room_idChanged();
    #endregion
		
		public Showtimes()
		{
			this._Schedule = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedule), new Action<Schedule>(this.detach_Schedule));
			this._Hours = default(EntityRef<Hours>);
			this._Screening_rooms = default(EntityRef<Screening_rooms>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_showtime_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int showtime_id
		{
			get
			{
				return this._showtime_id;
			}
			set
			{
				if ((this._showtime_id != value))
				{
					this.Onshowtime_idChanging(value);
					this.SendPropertyChanging();
					this._showtime_id = value;
					this.SendPropertyChanged("showtime_id");
					this.Onshowtime_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hour_id", DbType="Int NOT NULL")]
		public int hour_id
		{
			get
			{
				return this._hour_id;
			}
			set
			{
				if ((this._hour_id != value))
				{
					if (this._Hours.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onhour_idChanging(value);
					this.SendPropertyChanging();
					this._hour_id = value;
					this.SendPropertyChanged("hour_id");
					this.Onhour_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_screening_room_id", DbType="Int NOT NULL")]
		public int screening_room_id
		{
			get
			{
				return this._screening_room_id;
			}
			set
			{
				if ((this._screening_room_id != value))
				{
					if (this._Screening_rooms.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onscreening_room_idChanging(value);
					this.SendPropertyChanging();
					this._screening_room_id = value;
					this.SendPropertyChanged("screening_room_id");
					this.Onscreening_room_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Showtimes_Schedule", Storage="_Schedule", ThisKey="showtime_id", OtherKey="showtime_id")]
		public EntitySet<Schedule> Schedule
		{
			get
			{
				return this._Schedule;
			}
			set
			{
				this._Schedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hours_Showtimes", Storage="_Hours", ThisKey="hour_id", OtherKey="hour_id", IsForeignKey=true)]
		public Hours Hours
		{
			get
			{
				return this._Hours.Entity;
			}
			set
			{
				Hours previousValue = this._Hours.Entity;
				if (((previousValue != value) 
							|| (this._Hours.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hours.Entity = null;
						previousValue.Showtimes.Remove(this);
					}
					this._Hours.Entity = value;
					if ((value != null))
					{
						value.Showtimes.Add(this);
						this._hour_id = value.hour_id;
					}
					else
					{
						this._hour_id = default(int);
					}
					this.SendPropertyChanged("Hours");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Screening_rooms_Showtimes", Storage="_Screening_rooms", ThisKey="screening_room_id", OtherKey="screening_room_id", IsForeignKey=true)]
		public Screening_rooms Screening_rooms
		{
			get
			{
				return this._Screening_rooms.Entity;
			}
			set
			{
				Screening_rooms previousValue = this._Screening_rooms.Entity;
				if (((previousValue != value) 
							|| (this._Screening_rooms.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Screening_rooms.Entity = null;
						previousValue.Showtimes.Remove(this);
					}
					this._Screening_rooms.Entity = value;
					if ((value != null))
					{
						value.Showtimes.Add(this);
						this._screening_room_id = value.screening_room_id;
					}
					else
					{
						this._screening_room_id = default(int);
					}
					this.SendPropertyChanged("Screening_rooms");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Showtimes = this;
		}
		
		private void detach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Showtimes = null;
		}
	}
}
#pragma warning restore 1591
